#!/usr/bin/env python3
"""
Script para inicializa√ß√£o segura do banco de dados
Execute este script APENAS UMA VEZ ap√≥s o primeiro deploy
"""
import os
import sys
from app import create_app, db
from app.models import Usuario
from werkzeug.security import generate_password_hash

def init_database():
    """Inicializa o banco de dados de forma segura"""
    
    # Criar aplica√ß√£o
    app = create_app(os.getenv('FLASK_CONFIG') or 'production')
    
    with app.app_context():
        try:
            print("üîß Iniciando inicializa√ß√£o do banco de dados...")
            
            # Verificar se j√° existe usu√°rio admin primeiro (evita recriar)
            admin_email = 'admin@clinicamentalize.com.br'
            try:
                admin_user = Usuario.query.filter_by(email=admin_email).first()
                if admin_user:
                    print("‚ÑπÔ∏è Usu√°rio administrador j√° existe:")
                    print(f"   Email: {admin_user.email}")
                    print(f"   ID: {admin_user.id}")
                    print(f"   Ativo: {admin_user.ativo}")
                    print("‚úÖ Banco j√° inicializado - pulando cria√ß√£o")
                    return True
            except Exception as query_error:
                # Se der erro na query, provavelmente as tabelas n√£o existem
                print(f"‚ÑπÔ∏è Tabelas n√£o existem ainda: {query_error}")
            
            # Criar todas as tabelas
            print("üìã Criando tabelas...")
            db.create_all()
            print("‚úÖ Tabelas criadas com sucesso!")
            
            # Criar usu√°rio administrador
            print("üë§ Criando usu√°rio administrador...")
            admin_password = os.getenv('DEFAULT_ADMIN_PASSWORD', 'admin123')
            
            new_admin = Usuario(
                nome_completo='Administrador Sistema',
                tipo_usuario='admin',
                email=admin_email,
                telefone='(11) 96331-3561',
                senha_hash=generate_password_hash(admin_password),
                ativo=True
            )
            
            # Adicionar e fazer commit com tratamento de erro
            db.session.add(new_admin)
            db.session.commit()
            
            print("‚úÖ Usu√°rio administrador criado com sucesso!")
            print(f"   Email: {admin_email}")
            print(f"   Senha: {admin_password}")
            print("‚ö†Ô∏è  IMPORTANTE: Altere a senha ap√≥s o primeiro login!")
            
            # Verificar se foi criado corretamente
            created_admin = Usuario.query.filter_by(email=admin_email).first()
            if created_admin:
                print(f"‚úÖ Verifica√ß√£o: Admin encontrado no banco (ID: {created_admin.id})")
                return True
            else:
                print("‚ùå Erro: Admin n√£o foi encontrado ap√≥s cria√ß√£o!")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro durante inicializa√ß√£o: {e}")
            try:
                db.session.rollback()
                print("üîÑ Rollback executado")
            except Exception as rollback_error:
                print(f"‚ùå Erro no rollback: {rollback_error}")
            return False

def check_database_connection():
    """Verifica se a conex√£o com o banco est√° funcionando"""
    app = create_app(os.getenv('FLASK_CONFIG') or 'production')
    
    with app.app_context():
        try:
            # Tenta uma query simples usando SQLAlchemy 2.0+ syntax
            from sqlalchemy import text
            with db.engine.connect() as connection:
                result = connection.execute(text('SELECT 1'))
                result.close()
            print("‚úÖ Conex√£o com banco de dados OK")
            return True
        except Exception as e:
            print(f"‚ùå Erro de conex√£o com banco: {e}")
            return False

if __name__ == "__main__":
    print("üöÄ Script de Inicializa√ß√£o do Banco - Cl√≠nica Mentalize")
    print("=" * 50)
    
    # Verificar conex√£o primeiro
    if not check_database_connection():
        print("‚ùå Falha na conex√£o com banco. Verifique a DATABASE_URL")
        sys.exit(1)
    
    # Inicializar banco
    if init_database():
        print("=" * 50)
        print("‚úÖ Inicializa√ß√£o conclu√≠da com sucesso!")
        print("üåê Sua aplica√ß√£o est√° pronta para uso")
    else:
        print("=" * 50)
        print("‚ùå Falha na inicializa√ß√£o")
        sys.exit(1)